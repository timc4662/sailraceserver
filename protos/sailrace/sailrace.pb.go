// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: protos/sailrace.proto

package sailrace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the current state of a race (fleet).
type RaceState int32

const (
	RaceState_NotStarted   RaceState = 0 // race not started
	RaceState_Prestart     RaceState = 1 // race in prestart
	RaceState_Warning      RaceState = 2 // race in prep (5 min window)
	RaceState_FirstPrep    RaceState = 3 // race in 4 min window
	RaceState_SecondPrep   RaceState = 4 // race in 1 min window
	RaceState_ConfirmStart RaceState = 5 // race started, ocs, gen recall stage
	RaceState_IndRecall    RaceState = 6 // race in ind recall stage
	RaceState_InProgress   RaceState = 7 // race in progress (normal running)
	RaceState_Finishing    RaceState = 8 // race now finishing (capture final lap times)
	RaceState_Finished     RaceState = 9 // race is now finished
)

// Enum value maps for RaceState.
var (
	RaceState_name = map[int32]string{
		0: "NotStarted",
		1: "Prestart",
		2: "Warning",
		3: "FirstPrep",
		4: "SecondPrep",
		5: "ConfirmStart",
		6: "IndRecall",
		7: "InProgress",
		8: "Finishing",
		9: "Finished",
	}
	RaceState_value = map[string]int32{
		"NotStarted":   0,
		"Prestart":     1,
		"Warning":      2,
		"FirstPrep":    3,
		"SecondPrep":   4,
		"ConfirmStart": 5,
		"IndRecall":    6,
		"InProgress":   7,
		"Finishing":    8,
		"Finished":     9,
	}
)

func (x RaceState) Enum() *RaceState {
	p := new(RaceState)
	*p = x
	return p
}

func (x RaceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaceState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_sailrace_proto_enumTypes[0].Descriptor()
}

func (RaceState) Type() protoreflect.EnumType {
	return &file_protos_sailrace_proto_enumTypes[0]
}

func (x RaceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaceState.Descriptor instead.
func (RaceState) EnumDescriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{0}
}

// Describes the type of race
type RaceType int32

const (
	RaceType_SingleFleet RaceType = 0 // its a normal fleet race
	RaceType_Pursuit     RaceType = 1 // its a pursuit race
	RaceType_MultiFleet  RaceType = 2 // its a multi-fleet race (multi starts)
)

// Enum value maps for RaceType.
var (
	RaceType_name = map[int32]string{
		0: "SingleFleet",
		1: "Pursuit",
		2: "MultiFleet",
	}
	RaceType_value = map[string]int32{
		"SingleFleet": 0,
		"Pursuit":     1,
		"MultiFleet":  2,
	}
)

func (x RaceType) Enum() *RaceType {
	p := new(RaceType)
	*p = x
	return p
}

func (x RaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_sailrace_proto_enumTypes[1].Descriptor()
}

func (RaceType) Type() protoreflect.EnumType {
	return &file_protos_sailrace_proto_enumTypes[1]
}

func (x RaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaceType.Descriptor instead.
func (RaceType) EnumDescriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{1}
}

// Describes the recall mode for general recalls.
type RecallMode int32

const (
	RecallMode_MoveToBack RecallMode = 0 // Move current fleet to end
	RecallMode_Hold       RecallMode = 1 // Restart current fleet now
)

// Enum value maps for RecallMode.
var (
	RecallMode_name = map[int32]string{
		0: "MoveToBack",
		1: "Hold",
	}
	RecallMode_value = map[string]int32{
		"MoveToBack": 0,
		"Hold":       1,
	}
)

func (x RecallMode) Enum() *RecallMode {
	p := new(RecallMode)
	*p = x
	return p
}

func (x RecallMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecallMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_sailrace_proto_enumTypes[2].Descriptor()
}

func (RecallMode) Type() protoreflect.EnumType {
	return &file_protos_sailrace_proto_enumTypes[2]
}

func (x RecallMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecallMode.Descriptor instead.
func (RecallMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{2}
}

type Racer_Code int32

const (
	Racer_FIN  Racer_Code = 0 // finished
	Racer_OCS  Racer_Code = 1 // on course side at start of race
	Racer_DNF  Racer_Code = 2 // started but did not finish
	Racer_RET  Racer_Code = 3 // started but did not finish (some pref)
	Racer_DSQ  Racer_Code = 4 //disqualified
	Racer_DNC  Racer_Code = 5 // did not complete, did not come to start, same as DNS
	Racer_NONE Racer_Code = 6 // no code
)

// Enum value maps for Racer_Code.
var (
	Racer_Code_name = map[int32]string{
		0: "FIN",
		1: "OCS",
		2: "DNF",
		3: "RET",
		4: "DSQ",
		5: "DNC",
		6: "NONE",
	}
	Racer_Code_value = map[string]int32{
		"FIN":  0,
		"OCS":  1,
		"DNF":  2,
		"RET":  3,
		"DSQ":  4,
		"DNC":  5,
		"NONE": 6,
	}
)

func (x Racer_Code) Enum() *Racer_Code {
	p := new(Racer_Code)
	*p = x
	return p
}

func (x Racer_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Racer_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_sailrace_proto_enumTypes[3].Descriptor()
}

func (Racer_Code) Type() protoreflect.EnumType {
	return &file_protos_sailrace_proto_enumTypes[3]
}

func (x Racer_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Racer_Code.Descriptor instead.
func (Racer_Code) EnumDescriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{28, 0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Status) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresslist []string `protobuf:"bytes,1,rep,name=addresslist,proto3" json:"addresslist,omitempty"`
	Port        int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{1}
}

func (x *PingRequest) GetAddresslist() []string {
	if x != nil {
		return x.Addresslist
	}
	return nil
}

func (x *PingRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{2}
}

func (x *PingReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpsertSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series   []*Series `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	Snapshot bool      `protobuf:"varint,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *UpsertSeriesRequest) Reset() {
	*x = UpsertSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSeriesRequest) ProtoMessage() {}

func (x *UpsertSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSeriesRequest.ProtoReflect.Descriptor instead.
func (*UpsertSeriesRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{3}
}

func (x *UpsertSeriesRequest) GetSeries() []*Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *UpsertSeriesRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

type UpsertSeriesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpsertSeriesReply) Reset() {
	*x = UpsertSeriesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSeriesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSeriesReply) ProtoMessage() {}

func (x *UpsertSeriesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSeriesReply.ProtoReflect.Descriptor instead.
func (*UpsertSeriesReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertSeriesReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesKeys []string `protobuf:"bytes,1,rep,name=seriesKeys,proto3" json:"seriesKeys,omitempty"`
}

func (x *DeleteSeriesRequest) Reset() {
	*x = DeleteSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeriesRequest) ProtoMessage() {}

func (x *DeleteSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeriesRequest.ProtoReflect.Descriptor instead.
func (*DeleteSeriesRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSeriesRequest) GetSeriesKeys() []string {
	if x != nil {
		return x.SeriesKeys
	}
	return nil
}

type DeleteSeriesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteSeriesReply) Reset() {
	*x = DeleteSeriesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeriesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeriesReply) ProtoMessage() {}

func (x *DeleteSeriesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeriesReply.ProtoReflect.Descriptor instead.
func (*DeleteSeriesReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSeriesReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpsertRacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesKey string  `protobuf:"bytes,1,opt,name=seriesKey,proto3" json:"seriesKey,omitempty"`
	Races     []*Race `protobuf:"bytes,2,rep,name=races,proto3" json:"races,omitempty"`
	Snapshot  bool    `protobuf:"varint,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *UpsertRacesRequest) Reset() {
	*x = UpsertRacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRacesRequest) ProtoMessage() {}

func (x *UpsertRacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRacesRequest.ProtoReflect.Descriptor instead.
func (*UpsertRacesRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{7}
}

func (x *UpsertRacesRequest) GetSeriesKey() string {
	if x != nil {
		return x.SeriesKey
	}
	return ""
}

func (x *UpsertRacesRequest) GetRaces() []*Race {
	if x != nil {
		return x.Races
	}
	return nil
}

func (x *UpsertRacesRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

type UpsertRacesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpsertRacesReply) Reset() {
	*x = UpsertRacesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRacesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRacesReply) ProtoMessage() {}

func (x *UpsertRacesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRacesReply.ProtoReflect.Descriptor instead.
func (*UpsertRacesReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{8}
}

func (x *UpsertRacesReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteRacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesKey string   `protobuf:"bytes,1,opt,name=seriesKey,proto3" json:"seriesKey,omitempty"`
	RaceKeys  []string `protobuf:"bytes,2,rep,name=raceKeys,proto3" json:"raceKeys,omitempty"`
}

func (x *DeleteRacesRequest) Reset() {
	*x = DeleteRacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRacesRequest) ProtoMessage() {}

func (x *DeleteRacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRacesRequest.ProtoReflect.Descriptor instead.
func (*DeleteRacesRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteRacesRequest) GetSeriesKey() string {
	if x != nil {
		return x.SeriesKey
	}
	return ""
}

func (x *DeleteRacesRequest) GetRaceKeys() []string {
	if x != nil {
		return x.RaceKeys
	}
	return nil
}

type DeleteRacesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteRacesReply) Reset() {
	*x = DeleteRacesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRacesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRacesReply) ProtoMessage() {}

func (x *DeleteRacesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRacesReply.ProtoReflect.Descriptor instead.
func (*DeleteRacesReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRacesReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpsertParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesKey    string         `protobuf:"bytes,1,opt,name=seriesKey,proto3" json:"seriesKey,omitempty"`
	Participants []*Participant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	Snapshot     bool           `protobuf:"varint,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *UpsertParticipantsRequest) Reset() {
	*x = UpsertParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertParticipantsRequest) ProtoMessage() {}

func (x *UpsertParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertParticipantsRequest.ProtoReflect.Descriptor instead.
func (*UpsertParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{11}
}

func (x *UpsertParticipantsRequest) GetSeriesKey() string {
	if x != nil {
		return x.SeriesKey
	}
	return ""
}

func (x *UpsertParticipantsRequest) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *UpsertParticipantsRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

type UpsertParticipantsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpsertParticipantsReply) Reset() {
	*x = UpsertParticipantsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertParticipantsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertParticipantsReply) ProtoMessage() {}

func (x *UpsertParticipantsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertParticipantsReply.ProtoReflect.Descriptor instead.
func (*UpsertParticipantsReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertParticipantsReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesKey       string   `protobuf:"bytes,1,opt,name=seriesKey,proto3" json:"seriesKey,omitempty"`
	ParticipantKeys []string `protobuf:"bytes,2,rep,name=participantKeys,proto3" json:"participantKeys,omitempty"`
}

func (x *DeleteParticipantsRequest) Reset() {
	*x = DeleteParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteParticipantsRequest) ProtoMessage() {}

func (x *DeleteParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteParticipantsRequest.ProtoReflect.Descriptor instead.
func (*DeleteParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteParticipantsRequest) GetSeriesKey() string {
	if x != nil {
		return x.SeriesKey
	}
	return ""
}

func (x *DeleteParticipantsRequest) GetParticipantKeys() []string {
	if x != nil {
		return x.ParticipantKeys
	}
	return nil
}

type DeleteParticipantsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteParticipantsReply) Reset() {
	*x = DeleteParticipantsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteParticipantsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteParticipantsReply) ProtoMessage() {}

func (x *DeleteParticipantsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteParticipantsReply.ProtoReflect.Descriptor instead.
func (*DeleteParticipantsReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteParticipantsReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpsertFleetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesKey string   `protobuf:"bytes,1,opt,name=seriesKey,proto3" json:"seriesKey,omitempty"`
	Fleets    []*Fleet `protobuf:"bytes,2,rep,name=fleets,proto3" json:"fleets,omitempty"`
	Snapshot  bool     `protobuf:"varint,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *UpsertFleetsRequest) Reset() {
	*x = UpsertFleetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertFleetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertFleetsRequest) ProtoMessage() {}

func (x *UpsertFleetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertFleetsRequest.ProtoReflect.Descriptor instead.
func (*UpsertFleetsRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{15}
}

func (x *UpsertFleetsRequest) GetSeriesKey() string {
	if x != nil {
		return x.SeriesKey
	}
	return ""
}

func (x *UpsertFleetsRequest) GetFleets() []*Fleet {
	if x != nil {
		return x.Fleets
	}
	return nil
}

func (x *UpsertFleetsRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

type UpsertFleetsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpsertFleetsReply) Reset() {
	*x = UpsertFleetsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertFleetsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertFleetsReply) ProtoMessage() {}

func (x *UpsertFleetsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertFleetsReply.ProtoReflect.Descriptor instead.
func (*UpsertFleetsReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{16}
}

func (x *UpsertFleetsReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpsertRacersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaceKey   string   `protobuf:"bytes,1,opt,name=raceKey,proto3" json:"raceKey,omitempty"`
	SeriesKey string   `protobuf:"bytes,2,opt,name=seriesKey,proto3" json:"seriesKey,omitempty"`
	Racers    []*Racer `protobuf:"bytes,3,rep,name=racers,proto3" json:"racers,omitempty"`
	Snapshot  bool     `protobuf:"varint,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *UpsertRacersRequest) Reset() {
	*x = UpsertRacersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRacersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRacersRequest) ProtoMessage() {}

func (x *UpsertRacersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRacersRequest.ProtoReflect.Descriptor instead.
func (*UpsertRacersRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{17}
}

func (x *UpsertRacersRequest) GetRaceKey() string {
	if x != nil {
		return x.RaceKey
	}
	return ""
}

func (x *UpsertRacersRequest) GetSeriesKey() string {
	if x != nil {
		return x.SeriesKey
	}
	return ""
}

func (x *UpsertRacersRequest) GetRacers() []*Racer {
	if x != nil {
		return x.Racers
	}
	return nil
}

func (x *UpsertRacersRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

type UpsertRacersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpsertRacersReply) Reset() {
	*x = UpsertRacersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRacersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRacersReply) ProtoMessage() {}

func (x *UpsertRacersReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRacersReply.ProtoReflect.Descriptor instead.
func (*UpsertRacersReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertRacersReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteRacersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaceKey   string   `protobuf:"bytes,1,opt,name=raceKey,proto3" json:"raceKey,omitempty"`
	SeriesKey string   `protobuf:"bytes,2,opt,name=seriesKey,proto3" json:"seriesKey,omitempty"`
	RacerKeys []string `protobuf:"bytes,3,rep,name=racerKeys,proto3" json:"racerKeys,omitempty"`
}

func (x *DeleteRacersRequest) Reset() {
	*x = DeleteRacersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRacersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRacersRequest) ProtoMessage() {}

func (x *DeleteRacersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRacersRequest.ProtoReflect.Descriptor instead.
func (*DeleteRacersRequest) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteRacersRequest) GetRaceKey() string {
	if x != nil {
		return x.RaceKey
	}
	return ""
}

func (x *DeleteRacersRequest) GetSeriesKey() string {
	if x != nil {
		return x.SeriesKey
	}
	return ""
}

func (x *DeleteRacersRequest) GetRacerKeys() []string {
	if x != nil {
		return x.RacerKeys
	}
	return nil
}

type DeleteRacersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteRacersReply) Reset() {
	*x = DeleteRacersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRacersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRacersReply) ProtoMessage() {}

func (x *DeleteRacersReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRacersReply.ProtoReflect.Descriptor instead.
func (*DeleteRacersReply) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRacersReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Describes a series.
type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`   // The series identifier
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // The series name
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{21}
}

func (x *Series) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Series) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Describes a start sequence
type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warn  int32 `protobuf:"varint,1,opt,name=warn,proto3" json:"warn,omitempty"`
	Prep1 int32 `protobuf:"varint,2,opt,name=prep1,proto3" json:"prep1,omitempty"`
	Prep2 int32 `protobuf:"varint,3,opt,name=prep2,proto3" json:"prep2,omitempty"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{22}
}

func (x *Sequence) GetWarn() int32 {
	if x != nil {
		return x.Warn
	}
	return 0
}

func (x *Sequence) GetPrep1() int32 {
	if x != nil {
		return x.Prep1
	}
	return 0
}

func (x *Sequence) GetPrep2() int32 {
	if x != nil {
		return x.Prep2
	}
	return 0
}

// Describes a race/fleet start
type FleetStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fleet             string     `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`                                     // The fleet (i.e. fast/slow)
	Started           string     `protobuf:"bytes,2,opt,name=started,proto3" json:"started,omitempty"`                                 // The date/time when this fleet started
	Completed         string     `protobuf:"bytes,3,opt,name=completed,proto3" json:"completed,omitempty"`                             // The date/time when this fleet completed (if finished)
	SecondsSinceEpoch int32      `protobuf:"varint,4,opt,name=secondsSinceEpoch,proto3" json:"secondsSinceEpoch,omitempty"`            // The number of seconds offset from the race epoch
	PrestartDuration  int32      `protobuf:"varint,5,opt,name=prestartDuration,proto3" json:"prestartDuration,omitempty"`              // The number of seconds in the pre-start
	Seq               *Sequence  `protobuf:"bytes,6,opt,name=seq,proto3" json:"seq,omitempty"`                                         // The start sequence for this start
	RecallDelay       int32      `protobuf:"varint,7,opt,name=recallDelay,proto3" json:"recallDelay,omitempty"`                        // The number of seconds in the recall delay, used when recall mode is Hold.
	RecallMode        RecallMode `protobuf:"varint,8,opt,name=recallMode,proto3,enum=sailrace.RecallMode" json:"recallMode,omitempty"` // The recall mode
	RaceState         RaceState  `protobuf:"varint,9,opt,name=raceState,proto3,enum=sailrace.RaceState" json:"raceState,omitempty"`    // The current race state for this start.
}

func (x *FleetStart) Reset() {
	*x = FleetStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleetStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleetStart) ProtoMessage() {}

func (x *FleetStart) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleetStart.ProtoReflect.Descriptor instead.
func (*FleetStart) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{23}
}

func (x *FleetStart) GetFleet() string {
	if x != nil {
		return x.Fleet
	}
	return ""
}

func (x *FleetStart) GetStarted() string {
	if x != nil {
		return x.Started
	}
	return ""
}

func (x *FleetStart) GetCompleted() string {
	if x != nil {
		return x.Completed
	}
	return ""
}

func (x *FleetStart) GetSecondsSinceEpoch() int32 {
	if x != nil {
		return x.SecondsSinceEpoch
	}
	return 0
}

func (x *FleetStart) GetPrestartDuration() int32 {
	if x != nil {
		return x.PrestartDuration
	}
	return 0
}

func (x *FleetStart) GetSeq() *Sequence {
	if x != nil {
		return x.Seq
	}
	return nil
}

func (x *FleetStart) GetRecallDelay() int32 {
	if x != nil {
		return x.RecallDelay
	}
	return 0
}

func (x *FleetStart) GetRecallMode() RecallMode {
	if x != nil {
		return x.RecallMode
	}
	return RecallMode_MoveToBack
}

func (x *FleetStart) GetRaceState() RaceState {
	if x != nil {
		return x.RaceState
	}
	return RaceState_NotStarted
}

// Describes when a class should start in a pursuit race
type PursuitStartTimeDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cls       string `protobuf:"bytes,1,opt,name=cls,proto3" json:"cls,omitempty"`              // the class or a csv list of classes
	Py        int32  `protobuf:"varint,2,opt,name=py,proto3" json:"py,omitempty"`               // the py of the classes
	Delta     int32  `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`         // the delta in seconds from start;
	PrevDelta int32  `protobuf:"varint,4,opt,name=prevDelta,proto3" json:"prevDelta,omitempty"` // the delta in seconds from the prev class
}

func (x *PursuitStartTimeDelta) Reset() {
	*x = PursuitStartTimeDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PursuitStartTimeDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PursuitStartTimeDelta) ProtoMessage() {}

func (x *PursuitStartTimeDelta) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PursuitStartTimeDelta.ProtoReflect.Descriptor instead.
func (*PursuitStartTimeDelta) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{24}
}

func (x *PursuitStartTimeDelta) GetCls() string {
	if x != nil {
		return x.Cls
	}
	return ""
}

func (x *PursuitStartTimeDelta) GetPy() int32 {
	if x != nil {
		return x.Py
	}
	return 0
}

func (x *PursuitStartTimeDelta) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *PursuitStartTimeDelta) GetPrevDelta() int32 {
	if x != nil {
		return x.PrevDelta
	}
	return 0
}

// Describes a fleet
type Fleet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                             // The fleet identifier
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // The name of the fleet (fast/slow etc)
	Position    int32      `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`                  // The start position
	Seq         *Sequence  `protobuf:"bytes,4,opt,name=seq,proto3" json:"seq,omitempty"`                             // The start sequence for this fleet
	Mode        RecallMode `protobuf:"varint,5,opt,name=mode,proto3,enum=sailrace.RecallMode" json:"mode,omitempty"` // The recall mode for this fleet (i.e. restart now, or move to back)
	RecallDelay int32      `protobuf:"varint,6,opt,name=recallDelay,proto3" json:"recallDelay,omitempty"`            // The delay if restarting now
	MinPN       int32      `protobuf:"varint,7,opt,name=minPN,proto3" json:"minPN,omitempty"`                        // The min py (inclusive) for this fleet
	MaxPN       int32      `protobuf:"varint,8,opt,name=maxPN,proto3" json:"maxPN,omitempty"`                        // The max py (inclusive) for this fleet
}

func (x *Fleet) Reset() {
	*x = Fleet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fleet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fleet) ProtoMessage() {}

func (x *Fleet) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fleet.ProtoReflect.Descriptor instead.
func (*Fleet) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{25}
}

func (x *Fleet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Fleet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fleet) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Fleet) GetSeq() *Sequence {
	if x != nil {
		return x.Seq
	}
	return nil
}

func (x *Fleet) GetMode() RecallMode {
	if x != nil {
		return x.Mode
	}
	return RecallMode_MoveToBack
}

func (x *Fleet) GetRecallDelay() int32 {
	if x != nil {
		return x.RecallDelay
	}
	return 0
}

func (x *Fleet) GetMinPN() int32 {
	if x != nil {
		return x.MinPN
	}
	return 0
}

func (x *Fleet) GetMaxPN() int32 {
	if x != nil {
		return x.MaxPN
	}
	return 0
}

// Describes a race.
type Race struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                   string                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                      // The race identifier
	RaceNumber            int32                    `protobuf:"varint,2,opt,name=raceNumber,proto3" json:"raceNumber,omitempty"`                       // The race number
	Starts                []*FleetStart            `protobuf:"bytes,3,rep,name=starts,proto3" json:"starts,omitempty"`                                // The fleets/starts in this race
	RaceType              RaceType                 `protobuf:"varint,4,opt,name=raceType,proto3,enum=sailrace.RaceType" json:"raceType,omitempty"`    // The type of race (fleet, pursuit etc)
	LiveMode              bool                     `protobuf:"varint,5,opt,name=liveMode,proto3" json:"liveMode,omitempty"`                           // True if this should be sent out live over cloud
	PursuitRaceDeltas     []*PursuitStartTimeDelta `protobuf:"bytes,6,rep,name=pursuitRaceDeltas,proto3" json:"pursuitRaceDeltas,omitempty"`          // Deltas for pursuit races
	PursuitRaceTargetTime int32                    `protobuf:"varint,7,opt,name=pursuitRaceTargetTime,proto3" json:"pursuitRaceTargetTime,omitempty"` // The pursuit race target times in seconds
	SequenceNumber        int32                    `protobuf:"varint,8,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`               // A sequence number (updated each write)
	Epoch                 string                   `protobuf:"bytes,9,opt,name=epoch,proto3" json:"epoch,omitempty"`                                  // this is the date time the clock starts. The fleet offsets are based on this time.
	ScheduledTime         string                   `protobuf:"bytes,10,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`                 // scheduled time for the start
}

func (x *Race) Reset() {
	*x = Race{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Race) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Race) ProtoMessage() {}

func (x *Race) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Race.ProtoReflect.Descriptor instead.
func (*Race) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{26}
}

func (x *Race) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Race) GetRaceNumber() int32 {
	if x != nil {
		return x.RaceNumber
	}
	return 0
}

func (x *Race) GetStarts() []*FleetStart {
	if x != nil {
		return x.Starts
	}
	return nil
}

func (x *Race) GetRaceType() RaceType {
	if x != nil {
		return x.RaceType
	}
	return RaceType_SingleFleet
}

func (x *Race) GetLiveMode() bool {
	if x != nil {
		return x.LiveMode
	}
	return false
}

func (x *Race) GetPursuitRaceDeltas() []*PursuitStartTimeDelta {
	if x != nil {
		return x.PursuitRaceDeltas
	}
	return nil
}

func (x *Race) GetPursuitRaceTargetTime() int32 {
	if x != nil {
		return x.PursuitRaceTargetTime
	}
	return 0
}

func (x *Race) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Race) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *Race) GetScheduledTime() string {
	if x != nil {
		return x.ScheduledTime
	}
	return ""
}

// A competitor
type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`               // The identifier
	SailNumber string `protobuf:"bytes,2,opt,name=sailNumber,proto3" json:"sailNumber,omitempty"` // The sail number
	Helm       string `protobuf:"bytes,3,opt,name=helm,proto3" json:"helm,omitempty"`             // The helm name
	Crew       string `protobuf:"bytes,4,opt,name=crew,proto3" json:"crew,omitempty"`             // The crew name
	BoatClass  string `protobuf:"bytes,5,opt,name=boatClass,proto3" json:"boatClass,omitempty"`   // The class
	Py         int32  `protobuf:"varint,6,opt,name=py,proto3" json:"py,omitempty"`                // The handicap
	Fleet      string `protobuf:"bytes,7,opt,name=fleet,proto3" json:"fleet,omitempty"`           // The fleet
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{27}
}

func (x *Participant) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Participant) GetSailNumber() string {
	if x != nil {
		return x.SailNumber
	}
	return ""
}

func (x *Participant) GetHelm() string {
	if x != nil {
		return x.Helm
	}
	return ""
}

func (x *Participant) GetCrew() string {
	if x != nil {
		return x.Crew
	}
	return ""
}

func (x *Participant) GetBoatClass() string {
	if x != nil {
		return x.BoatClass
	}
	return ""
}

func (x *Participant) GetPy() int32 {
	if x != nil {
		return x.Py
	}
	return 0
}

func (x *Participant) GetFleet() string {
	if x != nil {
		return x.Fleet
	}
	return ""
}

// Contains the lap times etc for a participant in a race
type Racer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                             // the key of the racers
	Participant    *Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`             // the associated participant key
	Laps           []*Racer_Lap `protobuf:"bytes,3,rep,name=laps,proto3" json:"laps,omitempty"`                           // the lap times
	Code           Racer_Code   `protobuf:"varint,4,opt,name=code,proto3,enum=sailrace.Racer_Code" json:"code,omitempty"` // the result code for this racer. NONE if in progress.
	TalliedOn      bool         `protobuf:"varint,5,opt,name=talliedOn,proto3" json:"talliedOn,omitempty"`                // whether this racer is tallied on or not.
	Started        bool         `protobuf:"varint,6,opt,name=started,proto3" json:"started,omitempty"`                    // A flag which is true when started (fleet or pursuit)
	Position       int32        `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`                  // Used for pursuit race positions.
	SequenceNumber int32        `protobuf:"varint,8,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`      // A sequence number incremented on write
}

func (x *Racer) Reset() {
	*x = Racer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Racer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Racer) ProtoMessage() {}

func (x *Racer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Racer.ProtoReflect.Descriptor instead.
func (*Racer) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{28}
}

func (x *Racer) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Racer) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *Racer) GetLaps() []*Racer_Lap {
	if x != nil {
		return x.Laps
	}
	return nil
}

func (x *Racer) GetCode() Racer_Code {
	if x != nil {
		return x.Code
	}
	return Racer_FIN
}

func (x *Racer) GetTalliedOn() bool {
	if x != nil {
		return x.TalliedOn
	}
	return false
}

func (x *Racer) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *Racer) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Racer) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type Racer_Lap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elasped   int32   `protobuf:"varint,1,opt,name=elasped,proto3" json:"elasped,omitempty"`      // elapsed time in seconds
	Corrected float64 `protobuf:"fixed64,2,opt,name=corrected,proto3" json:"corrected,omitempty"` // the corrected time for this lap in fractions of a second.
	MostLaps  float64 `protobuf:"fixed64,3,opt,name=mostLaps,proto3" json:"mostLaps,omitempty"`   // an estimate of the most laps covered by the furthest boat
}

func (x *Racer_Lap) Reset() {
	*x = Racer_Lap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_sailrace_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Racer_Lap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Racer_Lap) ProtoMessage() {}

func (x *Racer_Lap) ProtoReflect() protoreflect.Message {
	mi := &file_protos_sailrace_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Racer_Lap.ProtoReflect.Descriptor instead.
func (*Racer_Lap) Descriptor() ([]byte, []int) {
	return file_protos_sailrace_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Racer_Lap) GetElasped() int32 {
	if x != nil {
		return x.Elasped
	}
	return 0
}

func (x *Racer_Lap) GetCorrected() float64 {
	if x != nil {
		return x.Corrected
	}
	return 0
}

func (x *Racer_Lap) GetMostLaps() float64 {
	if x != nil {
		return x.MostLaps
	}
	return 0
}

var File_protos_sailrace_proto protoreflect.FileDescriptor

var file_protos_sailrace_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63,
	0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x0b, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x35,
	0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61,
	0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x35, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x69,
	0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x05, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x3c, 0x0a,
	0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61,
	0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x43, 0x0a, 0x17,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x63, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x13, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x27, 0x0a, 0x06, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x65, 0x65,
	0x74, 0x52, 0x06, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46,
	0x6c, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x69,
	0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x61, 0x63, 0x65, 0x72, 0x52, 0x06, 0x72, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x69,
	0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x77, 0x61, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x65, 0x70, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x65, 0x70, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x65, 0x70, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x65, 0x70, 0x32,
	0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x34, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x15, 0x50, 0x75, 0x72, 0x73,
	0x75, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x70, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x76, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x76, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x50, 0x4e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x50, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x78, 0x50, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x50,
	0x4e, 0x22, 0x9b, 0x03, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73,
	0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69,
	0x74, 0x52, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72,
	0x73, 0x75, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x11, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x52, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74,
	0x52, 0x61, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x52, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x65, 0x6c, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x65, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x61,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f,
	0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x70, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x22, 0xc4, 0x03,
	0x0a, 0x05, 0x52, 0x61, 0x63, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x69, 0x6c,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x64,
	0x4f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x1a, 0x59, 0x0a, 0x03, 0x4c, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x61, 0x73,
	0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x73, 0x70,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x73, 0x74, 0x4c, 0x61, 0x70, 0x73, 0x22, 0x46, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x43, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x46, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x45, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x51, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x43, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x06, 0x2a, 0xa3, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x70, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x09, 0x2a, 0x38, 0x0a, 0x08, 0x52, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x46, 0x6c, 0x65, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x73, 0x75,
	0x69, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x10, 0x02, 0x2a, 0x26, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x6c, 0x64, 0x10, 0x01, 0x32, 0x9c, 0x06, 0x0a,
	0x08, 0x53, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x15, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1d, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x2e,
	0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x61, 0x69,
	0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73,
	0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73,
	0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74,
	0x73, 0x12, 0x1d, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e,
	0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61,
	0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x61, 0x69, 0x6c, 0x72, 0x61, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_sailrace_proto_rawDescOnce sync.Once
	file_protos_sailrace_proto_rawDescData = file_protos_sailrace_proto_rawDesc
)

func file_protos_sailrace_proto_rawDescGZIP() []byte {
	file_protos_sailrace_proto_rawDescOnce.Do(func() {
		file_protos_sailrace_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_sailrace_proto_rawDescData)
	})
	return file_protos_sailrace_proto_rawDescData
}

var file_protos_sailrace_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protos_sailrace_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_protos_sailrace_proto_goTypes = []interface{}{
	(RaceState)(0),                    // 0: sailrace.RaceState
	(RaceType)(0),                     // 1: sailrace.RaceType
	(RecallMode)(0),                   // 2: sailrace.RecallMode
	(Racer_Code)(0),                   // 3: sailrace.Racer.Code
	(*Status)(nil),                    // 4: sailrace.Status
	(*PingRequest)(nil),               // 5: sailrace.PingRequest
	(*PingReply)(nil),                 // 6: sailrace.PingReply
	(*UpsertSeriesRequest)(nil),       // 7: sailrace.UpsertSeriesRequest
	(*UpsertSeriesReply)(nil),         // 8: sailrace.UpsertSeriesReply
	(*DeleteSeriesRequest)(nil),       // 9: sailrace.DeleteSeriesRequest
	(*DeleteSeriesReply)(nil),         // 10: sailrace.DeleteSeriesReply
	(*UpsertRacesRequest)(nil),        // 11: sailrace.UpsertRacesRequest
	(*UpsertRacesReply)(nil),          // 12: sailrace.UpsertRacesReply
	(*DeleteRacesRequest)(nil),        // 13: sailrace.DeleteRacesRequest
	(*DeleteRacesReply)(nil),          // 14: sailrace.DeleteRacesReply
	(*UpsertParticipantsRequest)(nil), // 15: sailrace.UpsertParticipantsRequest
	(*UpsertParticipantsReply)(nil),   // 16: sailrace.UpsertParticipantsReply
	(*DeleteParticipantsRequest)(nil), // 17: sailrace.DeleteParticipantsRequest
	(*DeleteParticipantsReply)(nil),   // 18: sailrace.DeleteParticipantsReply
	(*UpsertFleetsRequest)(nil),       // 19: sailrace.UpsertFleetsRequest
	(*UpsertFleetsReply)(nil),         // 20: sailrace.UpsertFleetsReply
	(*UpsertRacersRequest)(nil),       // 21: sailrace.UpsertRacersRequest
	(*UpsertRacersReply)(nil),         // 22: sailrace.UpsertRacersReply
	(*DeleteRacersRequest)(nil),       // 23: sailrace.DeleteRacersRequest
	(*DeleteRacersReply)(nil),         // 24: sailrace.DeleteRacersReply
	(*Series)(nil),                    // 25: sailrace.Series
	(*Sequence)(nil),                  // 26: sailrace.Sequence
	(*FleetStart)(nil),                // 27: sailrace.FleetStart
	(*PursuitStartTimeDelta)(nil),     // 28: sailrace.PursuitStartTimeDelta
	(*Fleet)(nil),                     // 29: sailrace.Fleet
	(*Race)(nil),                      // 30: sailrace.Race
	(*Participant)(nil),               // 31: sailrace.Participant
	(*Racer)(nil),                     // 32: sailrace.Racer
	(*Racer_Lap)(nil),                 // 33: sailrace.Racer.Lap
}
var file_protos_sailrace_proto_depIdxs = []int32{
	4,  // 0: sailrace.PingReply.status:type_name -> sailrace.Status
	25, // 1: sailrace.UpsertSeriesRequest.series:type_name -> sailrace.Series
	4,  // 2: sailrace.UpsertSeriesReply.status:type_name -> sailrace.Status
	4,  // 3: sailrace.DeleteSeriesReply.status:type_name -> sailrace.Status
	30, // 4: sailrace.UpsertRacesRequest.races:type_name -> sailrace.Race
	4,  // 5: sailrace.UpsertRacesReply.status:type_name -> sailrace.Status
	4,  // 6: sailrace.DeleteRacesReply.status:type_name -> sailrace.Status
	31, // 7: sailrace.UpsertParticipantsRequest.participants:type_name -> sailrace.Participant
	4,  // 8: sailrace.UpsertParticipantsReply.status:type_name -> sailrace.Status
	4,  // 9: sailrace.DeleteParticipantsReply.status:type_name -> sailrace.Status
	29, // 10: sailrace.UpsertFleetsRequest.fleets:type_name -> sailrace.Fleet
	4,  // 11: sailrace.UpsertFleetsReply.status:type_name -> sailrace.Status
	32, // 12: sailrace.UpsertRacersRequest.racers:type_name -> sailrace.Racer
	4,  // 13: sailrace.UpsertRacersReply.status:type_name -> sailrace.Status
	4,  // 14: sailrace.DeleteRacersReply.status:type_name -> sailrace.Status
	26, // 15: sailrace.FleetStart.seq:type_name -> sailrace.Sequence
	2,  // 16: sailrace.FleetStart.recallMode:type_name -> sailrace.RecallMode
	0,  // 17: sailrace.FleetStart.raceState:type_name -> sailrace.RaceState
	26, // 18: sailrace.Fleet.seq:type_name -> sailrace.Sequence
	2,  // 19: sailrace.Fleet.mode:type_name -> sailrace.RecallMode
	27, // 20: sailrace.Race.starts:type_name -> sailrace.FleetStart
	1,  // 21: sailrace.Race.raceType:type_name -> sailrace.RaceType
	28, // 22: sailrace.Race.pursuitRaceDeltas:type_name -> sailrace.PursuitStartTimeDelta
	31, // 23: sailrace.Racer.participant:type_name -> sailrace.Participant
	33, // 24: sailrace.Racer.laps:type_name -> sailrace.Racer.Lap
	3,  // 25: sailrace.Racer.code:type_name -> sailrace.Racer.Code
	5,  // 26: sailrace.Sailrace.Ping:input_type -> sailrace.PingRequest
	7,  // 27: sailrace.Sailrace.UpsertSeries:input_type -> sailrace.UpsertSeriesRequest
	9,  // 28: sailrace.Sailrace.DeleteSeries:input_type -> sailrace.DeleteSeriesRequest
	11, // 29: sailrace.Sailrace.UpsertRaces:input_type -> sailrace.UpsertRacesRequest
	13, // 30: sailrace.Sailrace.DeleteRaces:input_type -> sailrace.DeleteRacesRequest
	15, // 31: sailrace.Sailrace.UpsertParticipants:input_type -> sailrace.UpsertParticipantsRequest
	17, // 32: sailrace.Sailrace.DeleteParticipants:input_type -> sailrace.DeleteParticipantsRequest
	19, // 33: sailrace.Sailrace.UpsertFleets:input_type -> sailrace.UpsertFleetsRequest
	21, // 34: sailrace.Sailrace.UpsertRacers:input_type -> sailrace.UpsertRacersRequest
	23, // 35: sailrace.Sailrace.DeleteRacers:input_type -> sailrace.DeleteRacersRequest
	6,  // 36: sailrace.Sailrace.Ping:output_type -> sailrace.PingReply
	8,  // 37: sailrace.Sailrace.UpsertSeries:output_type -> sailrace.UpsertSeriesReply
	10, // 38: sailrace.Sailrace.DeleteSeries:output_type -> sailrace.DeleteSeriesReply
	12, // 39: sailrace.Sailrace.UpsertRaces:output_type -> sailrace.UpsertRacesReply
	14, // 40: sailrace.Sailrace.DeleteRaces:output_type -> sailrace.DeleteRacesReply
	16, // 41: sailrace.Sailrace.UpsertParticipants:output_type -> sailrace.UpsertParticipantsReply
	18, // 42: sailrace.Sailrace.DeleteParticipants:output_type -> sailrace.DeleteParticipantsReply
	20, // 43: sailrace.Sailrace.UpsertFleets:output_type -> sailrace.UpsertFleetsReply
	22, // 44: sailrace.Sailrace.UpsertRacers:output_type -> sailrace.UpsertRacersReply
	24, // 45: sailrace.Sailrace.DeleteRacers:output_type -> sailrace.DeleteRacersReply
	36, // [36:46] is the sub-list for method output_type
	26, // [26:36] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_protos_sailrace_proto_init() }
func file_protos_sailrace_proto_init() {
	if File_protos_sailrace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_sailrace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSeriesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeriesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRacesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRacesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertParticipantsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteParticipantsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertFleetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertFleetsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRacersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRacersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRacersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRacersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleetStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PursuitStartTimeDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fleet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Race); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Racer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_sailrace_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Racer_Lap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_sailrace_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_sailrace_proto_goTypes,
		DependencyIndexes: file_protos_sailrace_proto_depIdxs,
		EnumInfos:         file_protos_sailrace_proto_enumTypes,
		MessageInfos:      file_protos_sailrace_proto_msgTypes,
	}.Build()
	File_protos_sailrace_proto = out.File
	file_protos_sailrace_proto_rawDesc = nil
	file_protos_sailrace_proto_goTypes = nil
	file_protos_sailrace_proto_depIdxs = nil
}
