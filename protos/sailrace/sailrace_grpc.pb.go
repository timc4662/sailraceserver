// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: protos/sailrace.proto

package sailrace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SailraceClient is the client API for Sailrace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SailraceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	UpsertSeries(ctx context.Context, in *UpsertSeriesRequest, opts ...grpc.CallOption) (*UpsertSeriesReply, error)
	DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*DeleteSeriesReply, error)
	UpsertRaces(ctx context.Context, in *UpsertRacesRequest, opts ...grpc.CallOption) (*UpsertRacesReply, error)
	DeleteRaces(ctx context.Context, in *DeleteRacesRequest, opts ...grpc.CallOption) (*DeleteRacesReply, error)
	UpsertParticipants(ctx context.Context, in *UpsertParticipantsRequest, opts ...grpc.CallOption) (*UpsertParticipantsReply, error)
	DeleteParticipants(ctx context.Context, in *DeleteParticipantsRequest, opts ...grpc.CallOption) (*DeleteParticipantsReply, error)
	UpsertFleets(ctx context.Context, in *UpsertFleetsRequest, opts ...grpc.CallOption) (*UpsertFleetsReply, error)
	UpsertRacers(ctx context.Context, in *UpsertRacersRequest, opts ...grpc.CallOption) (*UpsertRacersReply, error)
	DeleteRacers(ctx context.Context, in *DeleteRacersRequest, opts ...grpc.CallOption) (*DeleteRacersReply, error)
}

type sailraceClient struct {
	cc grpc.ClientConnInterface
}

func NewSailraceClient(cc grpc.ClientConnInterface) SailraceClient {
	return &sailraceClient{cc}
}

func (c *sailraceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) UpsertSeries(ctx context.Context, in *UpsertSeriesRequest, opts ...grpc.CallOption) (*UpsertSeriesReply, error) {
	out := new(UpsertSeriesReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/UpsertSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*DeleteSeriesReply, error) {
	out := new(DeleteSeriesReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/DeleteSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) UpsertRaces(ctx context.Context, in *UpsertRacesRequest, opts ...grpc.CallOption) (*UpsertRacesReply, error) {
	out := new(UpsertRacesReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/UpsertRaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) DeleteRaces(ctx context.Context, in *DeleteRacesRequest, opts ...grpc.CallOption) (*DeleteRacesReply, error) {
	out := new(DeleteRacesReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/DeleteRaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) UpsertParticipants(ctx context.Context, in *UpsertParticipantsRequest, opts ...grpc.CallOption) (*UpsertParticipantsReply, error) {
	out := new(UpsertParticipantsReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/UpsertParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) DeleteParticipants(ctx context.Context, in *DeleteParticipantsRequest, opts ...grpc.CallOption) (*DeleteParticipantsReply, error) {
	out := new(DeleteParticipantsReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/DeleteParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) UpsertFleets(ctx context.Context, in *UpsertFleetsRequest, opts ...grpc.CallOption) (*UpsertFleetsReply, error) {
	out := new(UpsertFleetsReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/UpsertFleets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) UpsertRacers(ctx context.Context, in *UpsertRacersRequest, opts ...grpc.CallOption) (*UpsertRacersReply, error) {
	out := new(UpsertRacersReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/UpsertRacers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sailraceClient) DeleteRacers(ctx context.Context, in *DeleteRacersRequest, opts ...grpc.CallOption) (*DeleteRacersReply, error) {
	out := new(DeleteRacersReply)
	err := c.cc.Invoke(ctx, "/sailrace.Sailrace/DeleteRacers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SailraceServer is the server API for Sailrace service.
// All implementations must embed UnimplementedSailraceServer
// for forward compatibility
type SailraceServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	UpsertSeries(context.Context, *UpsertSeriesRequest) (*UpsertSeriesReply, error)
	DeleteSeries(context.Context, *DeleteSeriesRequest) (*DeleteSeriesReply, error)
	UpsertRaces(context.Context, *UpsertRacesRequest) (*UpsertRacesReply, error)
	DeleteRaces(context.Context, *DeleteRacesRequest) (*DeleteRacesReply, error)
	UpsertParticipants(context.Context, *UpsertParticipantsRequest) (*UpsertParticipantsReply, error)
	DeleteParticipants(context.Context, *DeleteParticipantsRequest) (*DeleteParticipantsReply, error)
	UpsertFleets(context.Context, *UpsertFleetsRequest) (*UpsertFleetsReply, error)
	UpsertRacers(context.Context, *UpsertRacersRequest) (*UpsertRacersReply, error)
	DeleteRacers(context.Context, *DeleteRacersRequest) (*DeleteRacersReply, error)
	mustEmbedUnimplementedSailraceServer()
}

// UnimplementedSailraceServer must be embedded to have forward compatible implementations.
type UnimplementedSailraceServer struct {
}

func (UnimplementedSailraceServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSailraceServer) UpsertSeries(context.Context, *UpsertSeriesRequest) (*UpsertSeriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSeries not implemented")
}
func (UnimplementedSailraceServer) DeleteSeries(context.Context, *DeleteSeriesRequest) (*DeleteSeriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeries not implemented")
}
func (UnimplementedSailraceServer) UpsertRaces(context.Context, *UpsertRacesRequest) (*UpsertRacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRaces not implemented")
}
func (UnimplementedSailraceServer) DeleteRaces(context.Context, *DeleteRacesRequest) (*DeleteRacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRaces not implemented")
}
func (UnimplementedSailraceServer) UpsertParticipants(context.Context, *UpsertParticipantsRequest) (*UpsertParticipantsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertParticipants not implemented")
}
func (UnimplementedSailraceServer) DeleteParticipants(context.Context, *DeleteParticipantsRequest) (*DeleteParticipantsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipants not implemented")
}
func (UnimplementedSailraceServer) UpsertFleets(context.Context, *UpsertFleetsRequest) (*UpsertFleetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertFleets not implemented")
}
func (UnimplementedSailraceServer) UpsertRacers(context.Context, *UpsertRacersRequest) (*UpsertRacersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRacers not implemented")
}
func (UnimplementedSailraceServer) DeleteRacers(context.Context, *DeleteRacersRequest) (*DeleteRacersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRacers not implemented")
}
func (UnimplementedSailraceServer) mustEmbedUnimplementedSailraceServer() {}

// UnsafeSailraceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SailraceServer will
// result in compilation errors.
type UnsafeSailraceServer interface {
	mustEmbedUnimplementedSailraceServer()
}

func RegisterSailraceServer(s grpc.ServiceRegistrar, srv SailraceServer) {
	s.RegisterService(&Sailrace_ServiceDesc, srv)
}

func _Sailrace_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_UpsertSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).UpsertSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/UpsertSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).UpsertSeries(ctx, req.(*UpsertSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_DeleteSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).DeleteSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/DeleteSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).DeleteSeries(ctx, req.(*DeleteSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_UpsertRaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).UpsertRaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/UpsertRaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).UpsertRaces(ctx, req.(*UpsertRacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_DeleteRaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).DeleteRaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/DeleteRaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).DeleteRaces(ctx, req.(*DeleteRacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_UpsertParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).UpsertParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/UpsertParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).UpsertParticipants(ctx, req.(*UpsertParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_DeleteParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).DeleteParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/DeleteParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).DeleteParticipants(ctx, req.(*DeleteParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_UpsertFleets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertFleetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).UpsertFleets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/UpsertFleets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).UpsertFleets(ctx, req.(*UpsertFleetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_UpsertRacers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRacersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).UpsertRacers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/UpsertRacers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).UpsertRacers(ctx, req.(*UpsertRacersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sailrace_DeleteRacers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRacersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SailraceServer).DeleteRacers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sailrace.Sailrace/DeleteRacers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SailraceServer).DeleteRacers(ctx, req.(*DeleteRacersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sailrace_ServiceDesc is the grpc.ServiceDesc for Sailrace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sailrace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sailrace.Sailrace",
	HandlerType: (*SailraceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Sailrace_Ping_Handler,
		},
		{
			MethodName: "UpsertSeries",
			Handler:    _Sailrace_UpsertSeries_Handler,
		},
		{
			MethodName: "DeleteSeries",
			Handler:    _Sailrace_DeleteSeries_Handler,
		},
		{
			MethodName: "UpsertRaces",
			Handler:    _Sailrace_UpsertRaces_Handler,
		},
		{
			MethodName: "DeleteRaces",
			Handler:    _Sailrace_DeleteRaces_Handler,
		},
		{
			MethodName: "UpsertParticipants",
			Handler:    _Sailrace_UpsertParticipants_Handler,
		},
		{
			MethodName: "DeleteParticipants",
			Handler:    _Sailrace_DeleteParticipants_Handler,
		},
		{
			MethodName: "UpsertFleets",
			Handler:    _Sailrace_UpsertFleets_Handler,
		},
		{
			MethodName: "UpsertRacers",
			Handler:    _Sailrace_UpsertRacers_Handler,
		},
		{
			MethodName: "DeleteRacers",
			Handler:    _Sailrace_DeleteRacers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/sailrace.proto",
}
